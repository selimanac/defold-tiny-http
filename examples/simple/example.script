local function client_callbacks(self, message)
    print("========================")
    print("client_callbacks")
    pprint(message)
    local j = json.decode(message.result)
    pprint(j)

    if j.error then
        print("Error: ", j.error)
    end
end

-- local function stopserver()
--     dhttp.server_stop()
-- end

local function server_callbacks(self, message)
    print("========================")
    print("server_callbacks")
    pprint(message)

    local j = json.decode(message.result)

    if j.server_status == dhttp.SERVER_STOP then
        print("Server Stopped")
    end

    if j.server_status == dhttp.SERVER_START then
        print("Server Running")

        local params = {
            data = '{"title": "Test Title"}',
            test = '{"id": 1}'
        }
        --  dhttp.client_get("/str/abc123", 1)
        dhttp.client_post("/test/abc123", params, 2)
    --  timer.delay(1, false, stopserver)
    end
end

function init(self)
    msg.post("@render:", "use_fixed_projection", {near = -1, far = 1, zoom = 1})

    local host = "localhost"
    local port = 8800
    local enable_log = true -- Optional
    local enable_error = true -- Optional
    -- Optional Endpoints
    local endpoints = {
        {
            end_point_type = dhttp.METHOD_GET,
            end_point = "/mix/(.+)"
        },
        {
            end_point_type = dhttp.METHOD_POST,
            end_point = "/test/(\\w+)"
        }
    }

    -- Start Server
    dhttp.server_start(host, port, server_callbacks, enable_log, enable_error, endpoints)
    -- Content for all posts
    dhttp.server_post_content('{ "postback": "from server" }')

    -- Init Client
    dhttp.client_start(host, port, client_callbacks)

    go.animate("/go1", "position.y", go.PLAYBACK_LOOP_PINGPONG, 0, go.EASING_INBACK, 3)
end
