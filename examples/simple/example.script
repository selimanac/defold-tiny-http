-- Server vars
local host = "localhost"
local port = 8800
local enable_log = true -- Optional
local enable_error = true -- Optional
-- Optional Endpoints
local endpoints = {
    {
        endpoint_type = dhttp.METHOD_GET,
        endpoint = "/mix/(.+)"
    },
    {
        endpoint_type = dhttp.METHOD_POST,
        endpoint = "/test/(\\w+)"
    }
}

local function client_callbacks(self, message)
    print("========================")
    print("client_callbacks")
    pprint(message)

    local j = json.decode(message.result)
    pprint(j)

    if j.error then
        print("Error: ", j.error)
    end
end

local function client_send()
    -- Get or Post when server is ready
    local params = {
        data = '{"title": "Test Title"}',
        test = '{"id": 1}'
    }
    dhttp.client_post("/test/abc123", params, 2)
    -- dhttp.client_get("/str/abc123", 1) -- Get example
end

local function server_callbacks(self, message)
    print("========================")
    print("server_callbacks")
    pprint(message)

    local j = json.decode(message.result)

    if j.server_status == dhttp.SERVER_STOP then
        print("Server Stopped")
    elseif j.server_status == dhttp.SERVER_START then
        print("Server Running")
        timer.delay(0.1, false, client_send)
    end
end

function init(self)
    msg.post("@render:", "use_fixed_projection", {near = -1, far = 1, zoom = 1})
    go.animate("/go1", "position.y", go.PLAYBACK_LOOP_PINGPONG, 0, go.EASING_INBACK, 3)

    -- Start Server
    dhttp.server_start(host, port, server_callbacks, enable_log, enable_error, endpoints)
    -- Content for all posts
    dhttp.server_post_content('{ "postback": "from server" }')

    -- Init Client
    dhttp.client_start(host, port, client_callbacks)
end
