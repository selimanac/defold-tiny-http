local host_txt, send_btn, send_btn_label, server_log_txt, defold_logo, indicator, txt_input, input_back,red_box,green_box
local logo_pos = vmath.vector3()
local is_Active = false
local log_txt = ""
local indicator_pos = vmath.vector3()
local is_anim_complete=true
-- Server settings
local host = "localhost"
local port = 8800

local function client_callbacks(self, message)
    print("========================")
    print("client_callbacks")
    pprint(message)
    local result = cjson.decode(message.result)

    if result.error then
        print("Error: ", result.error)
    end
    log_txt = os.date("%m/%d/%Y %I:%M %p") .. "-" .. message.result .. "\n" .. log_txt
    gui.set_text(server_log_txt, log_txt)
  
end

local function anim_complete()
    is_anim_complete=true
end

local function send()
    local txt = gui.get_text(txt_input)
    txt = "/" .. txt
    dhttp.client_get(txt, 1)
    if is_anim_complete then
        is_anim_complete=false
    gui.animate(input_back, "color.w", 0, go.EASING_LINEAR, 0.2, 0, anim_complete, gui.PLAYBACK_ONCE_PINGPONG)
    end
end

local function post()
    local params = {
        data = '{ "title": "TEST URLexample glossary" }',
        test = '{ "id": 1 }'
    }
    dhttp.client_post("/post", params, 126)
end

local function init_client()
    dhttp.client_start(host, port, client_callbacks)
    dhttp.client_get("/hi", 1)
end

function init(self)
    msg.post("@render:", "clear_color", {color = vmath.vector4(251 / 255, 251 / 255, 251 / 255, 0)})
    msg.post(".", "acquire_input_focus")

    host_txt = gui.get_node("host")
    send_btn = gui.get_node("send_btn")

    send_btn_label = gui.get_node("send_btn_label")
    server_log_txt = gui.get_node("server_log")
    defold_logo = gui.get_node("defold")
    logo_pos = gui.get_position(defold_logo)
    indicator = gui.get_node("indicator")
    txt_input = gui.get_node("txt_input")
    input_back = gui.get_node("input_back")
    red_box = gui.get_node("red_box")
    green_box = gui.get_node("green_box")

    local m = gui.get_text_metrics_from_node(txt_input)

    indicator_pos = gui.get_position(indicator)
    local p = vmath.vector3(indicator_pos.x + m.width, indicator_pos.y, indicator_pos.z)
    gui.set_position(indicator, p)
    gui.set_text(host_txt, "SERVER:" .. host .. ":" .. tostring(port))
    gui.animate(indicator, "color.w", 0, gui.EASING_INOUTCIRC, 0.5, 0.1, nil, gui.PLAYBACK_LOOP_PINGPONG)
    init_client()

    gui.animate(
		defold_logo,
		"position.y",
		logo_pos.y + 50,
		gui.EASING_INBOUNCE,
		1,
		0,
		nil,
		gui.PLAYBACK_LOOP_PINGPONG
	)
end

function on_input(self, action_id, action)
    if (action_id == hash("enter") or gui.pick_node(send_btn, action.x, action.y)) and action.pressed then
        send()
        return
    end
    if action_id == hash("delete") and action.repeated then
        local txt = gui.get_text(txt_input)
        txt = txt:sub(1, -2)

        gui.set_text(txt_input, txt)
        local m = gui.get_text_metrics_from_node(txt_input)
        local p = vmath.vector3(indicator_pos.x + m.width, indicator_pos.y, indicator_pos.z)
        gui.set_position(indicator, p)
        return
    end

    if action_id == hash("text") then
        local txt = gui.get_text(txt_input)
        txt = txt .. action.text

        gui.set_text(txt_input, txt)
        local m = gui.get_text_metrics_from_node(txt_input)

        local p = vmath.vector3(indicator_pos.x + m.width, indicator_pos.y, indicator_pos.z)

        if action.text == " " then
            p.x = p.x + m.max_descent
        end

        gui.set_position(indicator, p)
    end

    if gui.pick_node(red_box, action.x, action.y) and action.pressed then
       post()
    end
end
